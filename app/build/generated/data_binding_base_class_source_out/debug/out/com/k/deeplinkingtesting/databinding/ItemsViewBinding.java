// Generated by view binder compiler. Do not edit!
package com.k.deeplinkingtesting.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.k.deeplinkingtesting.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemsViewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView Image;

  @NonNull
  public final TextView Time;

  @NonNull
  public final TextView Title;

  @NonNull
  public final View View;

  @NonNull
  public final LinearLayout l1;

  @NonNull
  public final TextView message;

  private ItemsViewBinding(@NonNull LinearLayout rootView, @NonNull ImageView Image,
      @NonNull TextView Time, @NonNull TextView Title, @NonNull View View, @NonNull LinearLayout l1,
      @NonNull TextView message) {
    this.rootView = rootView;
    this.Image = Image;
    this.Time = Time;
    this.Title = Title;
    this.View = View;
    this.l1 = l1;
    this.message = message;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemsViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemsViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.items_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemsViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id._image;
      ImageView Image = ViewBindings.findChildViewById(rootView, id);
      if (Image == null) {
        break missingId;
      }

      id = R.id._time;
      TextView Time = ViewBindings.findChildViewById(rootView, id);
      if (Time == null) {
        break missingId;
      }

      id = R.id._title;
      TextView Title = ViewBindings.findChildViewById(rootView, id);
      if (Title == null) {
        break missingId;
      }

      id = R.id._view;
      View View = ViewBindings.findChildViewById(rootView, id);
      if (View == null) {
        break missingId;
      }

      id = R.id.l1;
      LinearLayout l1 = ViewBindings.findChildViewById(rootView, id);
      if (l1 == null) {
        break missingId;
      }

      id = R.id.message;
      TextView message = ViewBindings.findChildViewById(rootView, id);
      if (message == null) {
        break missingId;
      }

      return new ItemsViewBinding((LinearLayout) rootView, Image, Time, Title, View, l1, message);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
